package io.rong.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sea_monster.dao.AbstractDao;
import com.sea_monster.dao.Property;
import com.sea_monster.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DRAFT.
*/
public class DraftDao extends AbstractDao<Draft, Void> {

    public static final String TABLENAME = "DRAFT";

    /**
     * Properties of entity Draft.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID", TABLENAME);
        public final static Property Type = new Property(1, Integer.class, "type", true, "TYPE", TABLENAME);
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT", TABLENAME);
        public final static Property Ext = new Property(3, byte[].class, "ext", false, "EXT", TABLENAME);
    };


    public DraftDao(DaoConfig config) {
        super(config);
    }
    
    public DraftDao(DaoConfig config, ConversationSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DRAFT' (" + //
                "'ID' TEXT NOT NULL ," + // 0: id
                "'TYPE' INTEGER ," + // 1: type
                "'CONTENT' TEXT," + // 2: content
                "'EXT' BLOB,"+ // 3: ext
                "PRIMARY KEY ('ID', 'TYPE'))");
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DRAFT_ID ON DRAFT" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DRAFT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Draft entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        byte[] ext = entity.getExt();
        if (ext != null) {
            stmt.bindBlob(4, ext);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Draft readEntity(Cursor cursor, int offset) {
        Draft entity = new Draft( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) // ext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Draft entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExt(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Draft entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Draft entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
