package com.tongban.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tongban.im.db.bean.GroupTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_TABLE.
*/
public class GroupTableDao extends AbstractDao<GroupTable, String> {

    public static final String TABLENAME = "GROUP_TABLE";

    /**
     * Properties of entity GroupTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Group_id = new Property(0, String.class, "group_id", true, "GROUP_ID");
        public final static Property Group_name = new Property(1, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Group_avatar = new Property(2, String.class, "group_avatar", false, "GROUP_AVATAR");
    };


    public GroupTableDao(DaoConfig config) {
        super(config);
    }
    
    public GroupTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_TABLE' (" + //
                "'GROUP_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: group_id
                "'GROUP_NAME' TEXT," + // 1: group_name
                "'GROUP_AVATAR' TEXT);"); // 2: group_avatar
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GROUP_TABLE_GROUP_ID ON GROUP_TABLE" +
                " (GROUP_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupTable entity) {
        stmt.clearBindings();
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(1, group_id);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(2, group_name);
        }
 
        String group_avatar = entity.getGroup_avatar();
        if (group_avatar != null) {
            stmt.bindString(3, group_avatar);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupTable readEntity(Cursor cursor, int offset) {
        GroupTable entity = new GroupTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // group_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // group_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // group_avatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupTable entity, int offset) {
        entity.setGroup_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroup_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroup_avatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GroupTable entity, long rowId) {
        return entity.getGroup_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GroupTable entity) {
        if(entity != null) {
            return entity.getGroup_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
