package com.tongban.im.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tongban.im.db.bean.UserTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_TABLE.
*/
public class UserTableDao extends AbstractDao<UserTable, String> {

    public static final String TABLENAME = "USER_TABLE";

    /**
     * Properties of entity UserTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Mobile_phone = new Property(1, String.class, "mobile_phone", false, "MOBILE_PHONE");
        public final static Property Nick_name = new Property(2, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Portrait_url = new Property(3, String.class, "portrait_url", false, "PORTRAIT_URL");
        public final static Property Tags = new Property(4, String.class, "tags", false, "TAGS");
        public final static Property Declaration = new Property(5, String.class, "declaration", false, "DECLARATION");
    };


    public UserTableDao(DaoConfig config) {
        super(config);
    }
    
    public UserTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_TABLE' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "'MOBILE_PHONE' TEXT," + // 1: mobile_phone
                "'NICK_NAME' TEXT," + // 2: nick_name
                "'PORTRAIT_URL' TEXT," + // 3: portrait_url
                "'TAGS' TEXT," + // 4: tags
                "'DECLARATION' TEXT);"); // 5: declaration
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_TABLE_USER_ID ON USER_TABLE" +
                " (USER_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTable entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String mobile_phone = entity.getMobile_phone();
        if (mobile_phone != null) {
            stmt.bindString(2, mobile_phone);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(3, nick_name);
        }
 
        String portrait_url = entity.getPortrait_url();
        if (portrait_url != null) {
            stmt.bindString(4, portrait_url);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(5, tags);
        }
 
        String declaration = entity.getDeclaration();
        if (declaration != null) {
            stmt.bindString(6, declaration);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserTable readEntity(Cursor cursor, int offset) {
        UserTable entity = new UserTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mobile_phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nick_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // portrait_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tags
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // declaration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTable entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMobile_phone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNick_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPortrait_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTags(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeclaration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserTable entity, long rowId) {
        return entity.getUser_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserTable entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
